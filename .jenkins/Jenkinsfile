pipeline {
    agent {
        docker {
            image '${CONTAINER_IMG}'
            reuseNode '${REUSE_NODE}'
            registryUrl '${REG_URL}'
            registryCredentialsId '${REG_CRED}'
            // args '-u root:root' // permission error for requirements.txt (Python)
        }
    }
    environment {
        // Container Registry
        REG_URL = 'https://index.docker.io/v1/'
        REG_CRED = 'REGCREG_DOCKERHUB'
        CONTAINER_IMG = 'maven:3.8.3-openjdk-17'
        REUSE_NODE = true
        // Git
        GIT_CRED = credentials('GIT_CRED_GITHUB')
        GIT_USERNAME = 'kkumtree'
        GIT_REPO = 'spring-cicd'
        TAG_VERSION = '1.0.0'
    }
    triggers {
        githubPush()
    }
    options {
        // buildDiscarder(logRotator(numToKeepStr: '5'))
        // disableConcurrentBuilds()
        // skipDefaultCheckout()
        // timeout(time: 1, unit: 'HOURS')
        timestamps()
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                sh 'mvn clean install'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy to Local') {
            steps {
                echo 'Deploying....'
                sh '''
                    docker run -it -d -p 8888:8080 --name tomcat10 tomcat:10.0-jdk17
                    docker cp /vagrantspringboot-cicd-v1.0.0.wr tomcat:/usr/local/tomcat/webapps/
                    dokcker exec tomcat9 ls -al /usr/localtomcat/webapps/
                '''
            }
            steps {
                echo 'Testing..(after 10 sec)'
                sh '''
                    wait 10
                    curl http://localhost:8888/vagrantspringboot-cicd-v1.0.0/
                '''
            }
        }
        stage('release to GitHub') {
            steps {
                echo 'Releasing to GitHub..'
                script {
                    def response = sh(script: """
                            curl -sSL \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GIT_CRED_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                              -d '{
                                  "tag_name":"${TAG_VERSION}",
                                  "target_commitish":"main",
                                  "name":"${TAG_VERSION}",
                                  "body":"Description of the release",
                                  "draft":false,
                                  "prerelease":false,
                                  "generate_release_notes":false
                                  
                                  }'
                    """, returnStdout: true) // 스크립트 실행 후 출력 결과를 response 변수에 저장
                    sh "echo '$response'"

                    def json = readJSON text: "$response"
                    def id = json.id
                    // sh "echo '$id'"

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${TAG_VERSION}.war"

                    sh """
                        curl -L \
                            -X POST \
                            -H "Accept: application/vnd.github+json" \
                            -H "Authorization: Bearer ${GIT_CRED_PSW}" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            -H "Content-Type: application/octet-stream" \
                            "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${TAG_VERSION}.war" \
                            --data-binary "@${GIT_REPO}-${TAG_VERSION}.war"
                    """
                }
            }
        }
    }
}